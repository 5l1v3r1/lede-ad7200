From 92d6bacf1c1662cc926137c8cd3d830590d4b1f0 Mon Sep 17 00:00:00 2001
From: Daniel Steinmetzer <dsteinmetzer@seemoo.tu-darmstadt.de>
Date: Fri, 22 Sep 2017 09:48:23 +0200
Subject: [PATCH 4/4] update sweep dump to sweep info

---
 debugfs.c | 192 ++++++++++++++++++++++++++++----------------------------------
 1 file changed, 87 insertions(+), 105 deletions(-)

diff --git a/drivers/net/wireless/ath/wil6210/debugfs.c b/drivers/net/wireless/ath/wil6210/debugfs.c
index c4cad0f..f030ef4 100644
--- a/drivers/net/wireless/ath/wil6210/debugfs.c
+++ b/drivers/net/wireless/ath/wil6210/debugfs.c
@@ -64,24 +64,22 @@ u32 my_console_uc_len;
 struct wil6210_priv *my_glob_wil = NULL;
 
 // Adding support for sweep info
-// #define MY_MAX_SECTOR 34
-// #define MY_SECTOR_TABLE_SIZE 16
 #define SWEEP_DUMP_SIZE 256
-// #define MY_SWEEP_INFO_PTR 0x93D000
-#define PTR_MEM_SWEEP_CUR_FEEDBACK 0x93D000
 #define PTR_MEM_SWEEP_DUMP 0x93D018
 
 typedef struct {
-        u32 sector_id;
-        u32 crssi;
-        s32 snr;
+	uint16_t sector_id;
+	int16_t snr;
+	uint32_t rssi;
+	uint8_t macaddr[6];
+	uint8_t flags[2];
 } sector_info_t;
 
 typedef struct {
-        u32 cur_pos;
+	u32 cur_pos;
 	u32 ctr_pkts;
 	u32 ctr_swps;
-        sector_info_t dump[SWEEP_DUMP_SIZE];
+	sector_info_t dump[SWEEP_DUMP_SIZE];
 } sweep_dump_t;
 /* END CODE ADDITIONS */
 
@@ -1707,31 +1705,31 @@ static const struct file_operations fops_suspend_stats = {
  * Author: D. Wegemer and D. Steinmetzer */
 int
 console_open_fw(struct inode *inode, struct file *file) {
-    u32 console_ptr = 0;
-
-    printk(KERN_CRIT "console_open_fw() ENTER\n");
-
-    if(my_glob_wil != NULL) {
-        if(test_bit(WMI_FW_CAPABILITY_MOD_FW, my_glob_wil->fw_capabilities)) {
-            wil_memcpy_fromio_32(&console_ptr, (void * __force)my_glob_wil->csr + HOSTADDR(MY_CONSOLE_BASE_PTR_FW), 4);
-            wil_memcpy_fromio_32(&my_console_fw_len, (void * __force)my_glob_wil->csr + HOSTADDR(MY_CONSOLE_BASE_PTR_FW+4), 4);
-            if(my_console_fw_len < MY_CONSOLE_MAX_LEN) {
-                printk(KERN_CRIT "console_open_fw() my_console_fw_len %d\n", (unsigned int)  my_console_fw_len);
-            } else {
-                printk(KERN_CRIT "console len too big!\n");
-                return -1;
-            }
-            if(console_ptr != 0) {
-                wil_memcpy_fromio_32(my_console_fw, (void * __force)my_glob_wil->csr + HOSTADDR(console_ptr), my_console_fw_len);
-            }
-        } else {
-            printk(KERN_CRIT "console_open_fw() capability not available!\n");
-            return -1;
-        }
-    } else {
-        return -1;
-    }
-    return 0;
+	u32 console_ptr = 0;
+
+	printk(KERN_CRIT "console_open_fw() ENTER\n");
+
+	if(my_glob_wil != NULL) {
+		if(test_bit(WMI_FW_CAPABILITY_MOD_FW, my_glob_wil->fw_capabilities)) {
+			wil_memcpy_fromio_32(&console_ptr, (void * __force)my_glob_wil->csr + HOSTADDR(MY_CONSOLE_BASE_PTR_FW), 4);
+			wil_memcpy_fromio_32(&my_console_fw_len, (void * __force)my_glob_wil->csr + HOSTADDR(MY_CONSOLE_BASE_PTR_FW+4), 4);
+			if(my_console_fw_len < MY_CONSOLE_MAX_LEN) {
+				printk(KERN_CRIT "console_open_fw() my_console_fw_len %d\n", (unsigned int)  my_console_fw_len);
+			} else {
+				printk(KERN_CRIT "console len too big!\n");
+				return -1;
+			}
+			if(console_ptr != 0) {
+				wil_memcpy_fromio_32(my_console_fw, (void * __force)my_glob_wil->csr + HOSTADDR(console_ptr), my_console_fw_len);
+			}
+		} else {
+			printk(KERN_CRIT "console_open_fw() capability not available!\n");
+			return -1;
+		}
+	} else {
+		return -1;
+	}
+	return 0;
 }
 
 ssize_t
@@ -1742,55 +1740,55 @@ console_read_fw(struct file *filp, char *buffer, size_t length, loff_t *offset)
 }
 
 static const struct file_operations fops_console_fw = {
-    .open       = console_open_fw,
-    .read       = console_read_fw,
+	.open	= console_open_fw,
+	.read	= console_read_fw,
 };
 
 int
 console_open_uc(struct inode *inode, struct file *file) {
-    u32 console_ptr = 0;
-
-    printk(KERN_CRIT "console_open_uc() ENTER\n");
-
-    if(my_glob_wil != NULL) {
-        if(test_bit(WMI_FW_CAPABILITY_MOD_FW, my_glob_wil->fw_capabilities)) {
-            wil_memcpy_fromio_32(&console_ptr, (void * __force)my_glob_wil->csr + HOSTADDR(MY_CONSOLE_BASE_PTR_UC), 4);
-            wil_memcpy_fromio_32(&my_console_uc_len, (void * __force)my_glob_wil->csr + HOSTADDR(MY_CONSOLE_BASE_PTR_UC+4), 4);
-            if(my_console_uc_len < MY_CONSOLE_MAX_LEN) {
-                printk(KERN_CRIT "console_open_uc() console_ptr: 0x%x, my_console_uc_len %d\n", console_ptr, (unsigned int) my_console_uc_len);
-            } else {
-                printk(KERN_CRIT "console len too big!\n");
-                return -1;
-            }
-            if(console_ptr != 0) {
-                wil_memcpy_fromio_32(my_console_uc, (void * __force)my_glob_wil->csr + HOSTADDR(console_ptr), my_console_uc_len);
-            }
-        } else {
-            printk(KERN_CRIT "console_open_uc() capability not available!\n");
-            return -1;
-        }
-    } else {
-        return -1;
-    }
-    return 0;
+	u32 console_ptr = 0;
+
+	printk(KERN_CRIT "console_open_uc() ENTER\n");
+
+	if(my_glob_wil != NULL) {
+		if(test_bit(WMI_FW_CAPABILITY_MOD_FW, my_glob_wil->fw_capabilities)) {
+		wil_memcpy_fromio_32(&console_ptr, (void * __force)my_glob_wil->csr + HOSTADDR(MY_CONSOLE_BASE_PTR_UC), 4);
+			wil_memcpy_fromio_32(&my_console_uc_len, (void * __force)my_glob_wil->csr + HOSTADDR(MY_CONSOLE_BASE_PTR_UC+4), 4);
+			if(my_console_uc_len < MY_CONSOLE_MAX_LEN) {
+				printk(KERN_CRIT "console_open_uc() console_ptr: 0x%x, my_console_uc_len %d\n", console_ptr, (unsigned int) my_console_uc_len);
+			} else {
+				printk(KERN_CRIT "console len too big!\n");
+				return -1;
+			}
+			if(console_ptr != 0) {
+				wil_memcpy_fromio_32(my_console_uc, (void * __force)my_glob_wil->csr + HOSTADDR(console_ptr), my_console_uc_len);
+			}
+		} else {
+			printk(KERN_CRIT "console_open_uc() capability not available!\n");
+			return -1;
+		}
+	} else {
+		return -1;
+	}
+	return 0;
 }
 
 ssize_t
 console_read_uc(struct file *filp, char *buffer, size_t length, loff_t *offset) {
-    ssize_t ret;
-    ret = simple_read_from_buffer(buffer, length, offset, my_console_uc, my_console_uc_len);
-    return ret;
+	ssize_t ret;
+	ret = simple_read_from_buffer(buffer, length, offset, my_console_uc, my_console_uc_len);
+	return ret;
 }
 
 static const struct file_operations fops_console_uc = {
-    .open       = console_open_uc,
-    .read       = console_read_uc,
+	.open	= console_open_uc,
+	.read	= console_read_uc,
 };
 
 /* Adding support for sweep info
  * Author: D. Wegemer and D. Steinmetzer */
 static int
-sweep_dump_show(struct seq_file *s, void *data) {
+sweep_info_show(struct seq_file *s, void *data) {
 	u32 i, p;
 	sweep_dump_t sweep_dump;
 	sector_info_t feedback_info;
@@ -1798,67 +1796,49 @@ sweep_dump_show(struct seq_file *s, void *data) {
 
 	if(my_glob_wil != NULL) {
 		if(test_bit(WMI_FW_CAPABILITY_MOD_FW, my_glob_wil->fw_capabilities)) {
-			sweep_stats_t sweep_stats;
-
-			// Copy the statistics			
-			wil_memcpy_fromio_32((void *) &sweep_stats, (void * __force)my_glob_wil->csr + HOSTADDR(PTR_SWEEP_STATS), sizeof(sweep_stats_t));
-			
-			//Copy the Feedback Reports
-                        wil_memcpy_fromio_32((void *) &feedback_info, (void * __force)my_glob_wil->csr + HOSTADDR(PTR_MEM_SWEEP_CUR_FEEDBACK), 
-				sizeof(sector_info_t));
 
 			// Copy the Sweep Dump
-                        wil_memcpy_fromio_32((void *) &sweep_dump, (void * __force)my_glob_wil->csr + HOSTADDR(PTR_MEM_SWEEP_DUMP), sizeof(sweep_dump_t));
-	
-			// Write results to output
-			seq_printf(s, "Feedback: [sec: %2d, crssi: %6d, snr: %2d dB]\n",
-				feedback_info.sector_id, feedback_info.crssi, feedback_info.snr);
-
-			seq_printf(s, "Counter: %d swps, %d pkts, %d miss, %d ok, %d ovfl, %d null\n", 
-				sweep_dump.ctr_swps,  sweep_dump.ctr_pkts, sweep_stats.ctr_missed, sweep_stats.ctr_valid, 
-				sweep_stats.ctr_overflow, sweep_stats.ctr_null);
-			
-			seq_printf(s, "Sector Sweep Dump: {\n");
+			wil_memcpy_fromio_32((void *) &sweep_dump, (void * __force)my_glob_wil->csr + HOSTADDR(PTR_MEM_SWEEP_DUMP), sizeof(sweep_dump_t));
+			seq_printf(s, "Counter: %d swps, %d pkts\n", 
+				sweep_dump.ctr_swps,  sweep_dump.ctr_pkts);
+			seq_printf(s, "Sector Sweep Info: {\n");
 			// Iterate over all members in sweep dump
 			for(i=0; i < SWEEP_DUMP_SIZE; i++) {
 				p = (sweep_dump.cur_pos + i) % SWEEP_DUMP_SIZE;
-				
 				snr_qdb = sweep_dump.dump[p].snr;
 				if (snr_qdb > 0xFF){
 					snr_qdb -= 0x200;
 				}
-				
 				// Determine the SNR in dB
-				snr_db = (snr_qdb + 2) >> 2;	
-				
-				seq_printf(s, "  [sec: %2d crssi: %7d snr: %3d qdB (%2d dB)\n", 
-					sweep_dump.dump[p].sector_id, sweep_dump.dump[p].crssi, snr_qdb, snr_db );
-			
+				snr_db = (snr_qdb + 2) >> 2;
+				seq_printf(s, "  [sec: %2d rssi: %7d snr: %3d qdB (%2d dB) src: %02x:%02x:%02x:%02x:%02x:%02x]\n", 
+					sweep_dump.dump[p].sector_id, sweep_dump.dump[p].rssi, snr_qdb, snr_db,
+					sweep_dump.dump[p].macaddr[0], sweep_dump.dump[p].macaddr[1], sweep_dump.dump[p].macaddr[2],
+					sweep_dump.dump[p].macaddr[3], sweep_dump.dump[p].macaddr[4], sweep_dump.dump[p].macaddr[5] );
 			}
 			seq_printf(s, "}\n");
-        	} else {
-            		return -1;
-        	}
-    	} else {
-        	return -1;
-    	}
-    	return 0;
+		} else {
+			return -1;
+		}
+	} else {
+		return -1;
+	}
+	return 0;
 }
 
 static int
-sweep_dump_open(struct inode *inode, struct file *file) {
-    return single_open(file, sweep_dump_show, inode->i_private);
+sweep_info_open(struct inode *inode, struct file *file) {
+    return single_open(file, sweep_info_show, inode->i_private);
 }
 
-static const struct file_operations fops_sweep_dump = {
-    	.open       	= sweep_dump_open,
+static const struct file_operations fops_sweep_info = {
+	.open		= sweep_info_open,
 	.release	= single_release,
 	.read		= seq_read,
 	.llseek		= seq_lseek,
 };
 
 
-
 /*----------------*/
 static void wil6210_debugfs_init_blobs(struct wil6210_priv *wil,
 				       struct dentry *dbg)
@@ -1914,6 +1894,8 @@ static const struct {
 	{"suspend_stats",	0644,	&fops_suspend_stats},
 	{"console_fw",	0444,		&fops_console_fw},
 	{"console_uc",	0444,		&fops_console_uc},
+	{"sweep_info",	0444,		&fops_sweep_info},
+
 };
 
 static void wil6210_debugfs_init_files(struct wil6210_priv *wil,
-- 
2.11.0 (Apple Git-81)

