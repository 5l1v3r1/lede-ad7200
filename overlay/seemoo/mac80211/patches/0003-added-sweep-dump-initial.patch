From 6ce24f0c0742657e5c81698d397e9b73f8945d9b Mon Sep 17 00:00:00 2001
From: Daniel Steinmetzer <dsteinmetzer@seemoo.tu-darmstadt.de>
Date: Thu, 21 Sep 2017 19:12:51 +0200
Subject: [PATCH 3/4] added sweep dump initial

---
 debugfs.c | 92 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 92 insertions(+)

diff --git a/drivers/net/wireless/ath/wil6210/debugfs.c b/drivers/net/wireless/ath/wil6210/debugfs.c
index a6bdf44..c4cad0f 100644
--- a/drivers/net/wireless/ath/wil6210/debugfs.c
+++ b/drivers/net/wireless/ath/wil6210/debugfs.c
@@ -62,6 +62,27 @@ u32 my_console_fw_len;
 u32 my_console_uc_len;
 
 struct wil6210_priv *my_glob_wil = NULL;
+
+// Adding support for sweep info
+// #define MY_MAX_SECTOR 34
+// #define MY_SECTOR_TABLE_SIZE 16
+#define SWEEP_DUMP_SIZE 256
+// #define MY_SWEEP_INFO_PTR 0x93D000
+#define PTR_MEM_SWEEP_CUR_FEEDBACK 0x93D000
+#define PTR_MEM_SWEEP_DUMP 0x93D018
+
+typedef struct {
+        u32 sector_id;
+        u32 crssi;
+        s32 snr;
+} sector_info_t;
+
+typedef struct {
+        u32 cur_pos;
+	u32 ctr_pkts;
+	u32 ctr_swps;
+        sector_info_t dump[SWEEP_DUMP_SIZE];
+} sweep_dump_t;
 /* END CODE ADDITIONS */
 
 
@@ -1766,6 +1787,77 @@ static const struct file_operations fops_console_uc = {
     .read       = console_read_uc,
 };
 
+/* Adding support for sweep info
+ * Author: D. Wegemer and D. Steinmetzer */
+static int
+sweep_dump_show(struct seq_file *s, void *data) {
+	u32 i, p;
+	sweep_dump_t sweep_dump;
+	sector_info_t feedback_info;
+	int snr_qdb, snr_db;
+
+	if(my_glob_wil != NULL) {
+		if(test_bit(WMI_FW_CAPABILITY_MOD_FW, my_glob_wil->fw_capabilities)) {
+			sweep_stats_t sweep_stats;
+
+			// Copy the statistics			
+			wil_memcpy_fromio_32((void *) &sweep_stats, (void * __force)my_glob_wil->csr + HOSTADDR(PTR_SWEEP_STATS), sizeof(sweep_stats_t));
+			
+			//Copy the Feedback Reports
+                        wil_memcpy_fromio_32((void *) &feedback_info, (void * __force)my_glob_wil->csr + HOSTADDR(PTR_MEM_SWEEP_CUR_FEEDBACK), 
+				sizeof(sector_info_t));
+
+			// Copy the Sweep Dump
+                        wil_memcpy_fromio_32((void *) &sweep_dump, (void * __force)my_glob_wil->csr + HOSTADDR(PTR_MEM_SWEEP_DUMP), sizeof(sweep_dump_t));
+	
+			// Write results to output
+			seq_printf(s, "Feedback: [sec: %2d, crssi: %6d, snr: %2d dB]\n",
+				feedback_info.sector_id, feedback_info.crssi, feedback_info.snr);
+
+			seq_printf(s, "Counter: %d swps, %d pkts, %d miss, %d ok, %d ovfl, %d null\n", 
+				sweep_dump.ctr_swps,  sweep_dump.ctr_pkts, sweep_stats.ctr_missed, sweep_stats.ctr_valid, 
+				sweep_stats.ctr_overflow, sweep_stats.ctr_null);
+			
+			seq_printf(s, "Sector Sweep Dump: {\n");
+			// Iterate over all members in sweep dump
+			for(i=0; i < SWEEP_DUMP_SIZE; i++) {
+				p = (sweep_dump.cur_pos + i) % SWEEP_DUMP_SIZE;
+				
+				snr_qdb = sweep_dump.dump[p].snr;
+				if (snr_qdb > 0xFF){
+					snr_qdb -= 0x200;
+				}
+				
+				// Determine the SNR in dB
+				snr_db = (snr_qdb + 2) >> 2;	
+				
+				seq_printf(s, "  [sec: %2d crssi: %7d snr: %3d qdB (%2d dB)\n", 
+					sweep_dump.dump[p].sector_id, sweep_dump.dump[p].crssi, snr_qdb, snr_db );
+			
+			}
+			seq_printf(s, "}\n");
+        	} else {
+            		return -1;
+        	}
+    	} else {
+        	return -1;
+    	}
+    	return 0;
+}
+
+static int
+sweep_dump_open(struct inode *inode, struct file *file) {
+    return single_open(file, sweep_dump_show, inode->i_private);
+}
+
+static const struct file_operations fops_sweep_dump = {
+    	.open       	= sweep_dump_open,
+	.release	= single_release,
+	.read		= seq_read,
+	.llseek		= seq_lseek,
+};
+
+
 
 /*----------------*/
 static void wil6210_debugfs_init_blobs(struct wil6210_priv *wil,
-- 
2.11.0 (Apple Git-81)

