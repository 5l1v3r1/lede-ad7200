From d62f73c0128947f51c724a9606dffc0f6ed99489 Mon Sep 17 00:00:00 2001
From: Daniel Steinmetzer <dsteinmetzer@seemoo.tu-darmstadt.de>
Date: Tue, 5 Sep 2017 09:45:46 +0200
Subject: [PATCH 54/59] seemoo: fix wil_memcpy_fromio_32

Signed-off-by: Daniel Steinmetzer <dsteinmetzer@seemoo.tu-darmstadt.de>
---
 wil6210/debugfs.c | 16 +++++++++-------
 1 file changed, 9 insertions(+), 7 deletions(-)

diff --git a/drivers/net/wireless/ath/wil6210/debugfs.c b/drivers/net/wireless/ath/wil6210/debugfs.c
index 3d7d544..531f3ec 100644
--- a/drivers/net/wireless/ath/wil6210/debugfs.c
+++ b/drivers/net/wireless/ath/wil6210/debugfs.c
@@ -1780,12 +1780,12 @@ int
 console_dump_open_fw(struct inode *inode, struct file *file) {
     u32 console_ptr = 0;
 
-    printk(KERN_CRIT "console_dump_open_fw() ENTER, wil: 0x%x\n", (unsigned int) my_glob_wil);
+    printk(KERN_CRIT "console_dump_open_fw() ENTER\n");
 
     if(my_glob_wil != NULL) {
         if(test_bit(WMI_FW_CAPABILITY_MOD_FW, my_glob_wil->fw_capabilities)) {
-            wil_memcpy_fromio_32(&console_ptr, (void * __force)my_glob_wil->csr + HOSTADDR(MY_CONSOLE_BASE_PTR_FW), 1);
-            wil_memcpy_fromio_32(&my_console_fw_len, (void * __force)my_glob_wil->csr + HOSTADDR(MY_CONSOLE_BASE_PTR_FW+4), 1);
+            wil_memcpy_fromio_32(&console_ptr, (void * __force)my_glob_wil->csr + HOSTADDR(MY_CONSOLE_BASE_PTR_FW), 4);
+            wil_memcpy_fromio_32(&my_console_fw_len, (void * __force)my_glob_wil->csr + HOSTADDR(MY_CONSOLE_BASE_PTR_FW+4), 4);
             if(my_console_fw_len < MY_CONSOLE_MAX_LEN) {
                 printk(KERN_CRIT "console_dump_open_fw() my_console_fw_len %d\n", (unsigned int)  my_console_fw_len);
             } else {
@@ -1796,6 +1796,7 @@ console_dump_open_fw(struct inode *inode, struct file *file) {
                 wil_memcpy_fromio_32(my_console_fw, (void * __force)my_glob_wil->csr + HOSTADDR(console_ptr), my_console_fw_len);
             }
         } else {
+            printk(KERN_CRIT "console_dump_open_fw() capabilities bit not set!\n");
             return -1;
         }
     } else {
@@ -1822,14 +1823,14 @@ int
 console_dump_open_uc(struct inode *inode, struct file *file) {
     u32 console_ptr = 0;
 
-    printk(KERN_CRIT "console_dump_open_uc() ENTER, wil: 0x%x\n", (unsigned int) my_glob_wil);
+    printk(KERN_CRIT "console_dump_open_uc() ENTER\n");
 
     if(my_glob_wil != NULL) {
         if(test_bit(WMI_FW_CAPABILITY_MOD_FW, my_glob_wil->fw_capabilities)) {
-            wil_memcpy_fromio_32(&console_ptr, (void * __force)my_glob_wil->csr + HOSTADDR(MY_CONSOLE_BASE_PTR_UC), 1);
-            wil_memcpy_fromio_32(&my_console_uc_len, (void * __force)my_glob_wil->csr + HOSTADDR(MY_CONSOLE_BASE_PTR_UC+4), 1);
+            wil_memcpy_fromio_32(&console_ptr, (void * __force)my_glob_wil->csr + HOSTADDR(MY_CONSOLE_BASE_PTR_UC), 4);
+            wil_memcpy_fromio_32(&my_console_uc_len, (void * __force)my_glob_wil->csr + HOSTADDR(MY_CONSOLE_BASE_PTR_UC+4), 4);
             if(my_console_uc_len < MY_CONSOLE_MAX_LEN) {
-                printk(KERN_CRIT "console_dump_open_uc() my_console_uc_len %d\n", (unsigned int) my_console_uc_len);
+                printk(KERN_CRIT "console_dump_open_uc() console_ptr: 0x%x, my_console_uc_len %d\n", console_ptr, (unsigned int) my_console_uc_len);
             } else {
                 printk(KERN_CRIT "console len too big!\n");
                 return -1;
@@ -1838,6 +1839,7 @@ console_dump_open_uc(struct inode *inode, struct file *file) {
                 wil_memcpy_fromio_32(my_console_uc, (void * __force)my_glob_wil->csr + HOSTADDR(console_ptr), my_console_uc_len);
             }
         } else {
+            printk(KERN_CRIT "console_dump_open_uc() capabilities bit not set!\n");
             return -1;
         }
     } else {
-- 
2.14.3 (Apple Git-98)

