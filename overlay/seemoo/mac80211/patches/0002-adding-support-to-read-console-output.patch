From ca3e62b155a1517b41f67487a12a29ad21578dd7 Mon Sep 17 00:00:00 2001
From: Daniel Steinmetzer <dsteinmetzer@seemoo.tu-darmstadt.de>
Date: Wed, 20 Sep 2017 13:25:52 +0200
Subject: [wil6210] adding support to read console output

---
 debugfs.c | 110 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 fw_inc.c  |   2 +-
 wmi.h     |   1 +
 3 files changed, 112 insertions(+), 1 deletion(-)

diff --git a/drivers/net/wireless/ath/wil6210/debugfs.c b/drivers/net/wireless/ath/wil6210/debugfs.c
index ec4cd14..a6bdf44 100644
--- a/drivers/net/wireless/ath/wil6210/debugfs.c
+++ b/drivers/net/wireless/ath/wil6210/debugfs.c
@@ -46,6 +46,25 @@ struct dbg_off {
 	enum dbg_off_type type;
 };
 
+/* 
+ * BEGIN TALON TOOLS CODE ADDITIONS
+ * Author: D. Wegemer and D. Steinmetzer
+ */
+
+// Adding support for console
+#define MY_CONSOLE_MAX_LEN 8192
+#define MY_CONSOLE_BASE_PTR_FW 0x8ffff0
+#define MY_CONSOLE_BASE_PTR_UC 0x935ff4
+
+u8 my_console_fw[MY_CONSOLE_MAX_LEN];
+u8 my_console_uc[MY_CONSOLE_MAX_LEN];
+u32 my_console_fw_len;
+u32 my_console_uc_len;
+
+struct wil6210_priv *my_glob_wil = NULL;
+/* END CODE ADDITIONS */
+
+
 static void wil_print_vring(struct seq_file *s, struct wil6210_priv *wil,
 			    const char *name, struct vring *vring,
 			    char _s, char _h)
@@ -1662,6 +1681,92 @@ static const struct file_operations fops_suspend_stats = {
 	.open  = simple_open,
 };
 
+ 
+/* Adding support for console
+ * Author: D. Wegemer and D. Steinmetzer */
+int
+console_open_fw(struct inode *inode, struct file *file) {
+    u32 console_ptr = 0;
+
+    printk(KERN_CRIT "console_open_fw() ENTER\n");
+
+    if(my_glob_wil != NULL) {
+        if(test_bit(WMI_FW_CAPABILITY_MOD_FW, my_glob_wil->fw_capabilities)) {
+            wil_memcpy_fromio_32(&console_ptr, (void * __force)my_glob_wil->csr + HOSTADDR(MY_CONSOLE_BASE_PTR_FW), 4);
+            wil_memcpy_fromio_32(&my_console_fw_len, (void * __force)my_glob_wil->csr + HOSTADDR(MY_CONSOLE_BASE_PTR_FW+4), 4);
+            if(my_console_fw_len < MY_CONSOLE_MAX_LEN) {
+                printk(KERN_CRIT "console_open_fw() my_console_fw_len %d\n", (unsigned int)  my_console_fw_len);
+            } else {
+                printk(KERN_CRIT "console len too big!\n");
+                return -1;
+            }
+            if(console_ptr != 0) {
+                wil_memcpy_fromio_32(my_console_fw, (void * __force)my_glob_wil->csr + HOSTADDR(console_ptr), my_console_fw_len);
+            }
+        } else {
+            printk(KERN_CRIT "console_open_fw() capability not available!\n");
+            return -1;
+        }
+    } else {
+        return -1;
+    }
+    return 0;
+}
+
+ssize_t
+console_read_fw(struct file *filp, char *buffer, size_t length, loff_t *offset) {
+	ssize_t ret;
+	ret = simple_read_from_buffer(buffer, length, offset, my_console_fw, my_console_fw_len);
+	return ret;
+}
+
+static const struct file_operations fops_console_fw = {
+    .open       = console_open_fw,
+    .read       = console_read_fw,
+};
+
+int
+console_open_uc(struct inode *inode, struct file *file) {
+    u32 console_ptr = 0;
+
+    printk(KERN_CRIT "console_open_uc() ENTER\n");
+
+    if(my_glob_wil != NULL) {
+        if(test_bit(WMI_FW_CAPABILITY_MOD_FW, my_glob_wil->fw_capabilities)) {
+            wil_memcpy_fromio_32(&console_ptr, (void * __force)my_glob_wil->csr + HOSTADDR(MY_CONSOLE_BASE_PTR_UC), 4);
+            wil_memcpy_fromio_32(&my_console_uc_len, (void * __force)my_glob_wil->csr + HOSTADDR(MY_CONSOLE_BASE_PTR_UC+4), 4);
+            if(my_console_uc_len < MY_CONSOLE_MAX_LEN) {
+                printk(KERN_CRIT "console_open_uc() console_ptr: 0x%x, my_console_uc_len %d\n", console_ptr, (unsigned int) my_console_uc_len);
+            } else {
+                printk(KERN_CRIT "console len too big!\n");
+                return -1;
+            }
+            if(console_ptr != 0) {
+                wil_memcpy_fromio_32(my_console_uc, (void * __force)my_glob_wil->csr + HOSTADDR(console_ptr), my_console_uc_len);
+            }
+        } else {
+            printk(KERN_CRIT "console_open_uc() capability not available!\n");
+            return -1;
+        }
+    } else {
+        return -1;
+    }
+    return 0;
+}
+
+ssize_t
+console_read_uc(struct file *filp, char *buffer, size_t length, loff_t *offset) {
+    ssize_t ret;
+    ret = simple_read_from_buffer(buffer, length, offset, my_console_uc, my_console_uc_len);
+    return ret;
+}
+
+static const struct file_operations fops_console_uc = {
+    .open       = console_open_uc,
+    .read       = console_read_uc,
+};
+
+
 /*----------------*/
 static void wil6210_debugfs_init_blobs(struct wil6210_priv *wil,
 				       struct dentry *dbg)
@@ -1715,6 +1820,8 @@ static const struct {
 	{"fw_capabilities",	0444,	&fops_fw_capabilities},
 	{"fw_version",	0444,		&fops_fw_version},
 	{"suspend_stats",	0644,	&fops_suspend_stats},
+	{"console_fw",	0444,		&fops_console_fw},
+	{"console_uc",	0444,		&fops_console_uc},
 };
 
 static void wil6210_debugfs_init_files(struct wil6210_priv *wil,
@@ -1787,6 +1894,9 @@ int wil6210_debugfs_init(struct wil6210_priv *wil)
 	struct dentry *dbg = wil->debug = debugfs_create_dir(WIL_NAME,
 			wil_to_wiphy(wil)->debugfsdir);
 
+	/* Register global pointer */
+	my_glob_wil = wil;
+
 	if (IS_ERR_OR_NULL(dbg))
 		return -ENODEV;
 
diff --git a/drivers/net/wireless/ath/wil6210/fw_inc.c b/drivers/net/wireless/ath/wil6210/fw_inc.c
index e01acac..f10b3a6 100644
--- a/drivers/net/wireless/ath/wil6210/fw_inc.c
+++ b/drivers/net/wireless/ath/wil6210/fw_inc.c
@@ -422,7 +422,7 @@ static const struct {
 	int (*parse_handler)(struct wil6210_priv *wil, const void *data,
 			     size_t size);
 } wil_fw_handlers[] = {
-	{wil_fw_type_comment, fw_handle_comment, fw_handle_capabilities},
+	{wil_fw_type_comment, fw_handle_capabilities, fw_handle_capabilities},
 	{wil_fw_type_data, fw_handle_data, fw_ignore_section},
 	{wil_fw_type_fill, fw_handle_fill, fw_ignore_section},
 	/* wil_fw_type_action */
diff --git a/drivers/net/wireless/ath/wil6210/wmi.h b/drivers/net/wireless/ath/wil6210/wmi.h
index 5263ee7..5867a89 100644
--- a/drivers/net/wireless/ath/wil6210/wmi.h
+++ b/drivers/net/wireless/ath/wil6210/wmi.h
@@ -63,6 +63,7 @@ enum wmi_fw_capability {
 	WMI_FW_CAPABILITY_MGMT_RETRY_LIMIT		= 3,
 	WMI_FW_CAPABILITY_DISABLE_AP_SME		= 4,
 	WMI_FW_CAPABILITY_WMI_ONLY			= 5,
+	WMI_FW_CAPABILITY_MOD_FW 			= 6,
 	WMI_FW_CAPABILITY_THERMAL_THROTTLING		= 7,
 	WMI_FW_CAPABILITY_D3_SUSPEND			= 8,
 	WMI_FW_CAPABILITY_LONG_RANGE			= 9,
-- 
2.11.0 (Apple Git-81)

